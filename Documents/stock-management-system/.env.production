# =============================================================================
# STOCK MANAGEMENT SYSTEM - PRODUCTION ENVIRONMENT CONFIGURATION
# =============================================================================
# This is a production-ready environment template for Dokploy deployment.
# 
# SECURITY WARNING: This file contains production defaults and examples.
# DO NOT use these exact values in production - generate your own secure values!
#
# For Dokploy deployment:
# 1. Copy these variables to Dokploy's environment variables interface
# 2. Replace all placeholder values with your actual production values
# 3. Generate secure random values for SECRET_KEY and POSTGRES_PASSWORD
# 4. Update domain-specific settings (CORS_ORIGINS, etc.)
# =============================================================================

# =============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# =============================================================================
# Production PostgreSQL Configuration
# Use DATABASE_URL for production (recommended) - overrides individual settings
# Format: postgresql://username:password@host:port/database
# 
# For Dokploy: Use 'database' as hostname (Docker Compose service name)
DATABASE_URL=postgresql://postgres:CHANGE_THIS_SECURE_DB_PASSWORD@database:5432/stock_management

# Alternative: Individual database settings (if not using DATABASE_URL)
POSTGRES_DB=stock_management
POSTGRES_USER=postgres
POSTGRES_PASSWORD=CHANGE_THIS_SECURE_DB_PASSWORD
POSTGRES_HOST=database
POSTGRES_PORT=5432

# Database Connection Pool Settings (Production Optimized)
# Maximum number of database connections in pool
DB_POOL_SIZE=15
# Maximum overflow connections beyond pool size
DB_MAX_OVERFLOW=25
# Connection timeout in seconds
DB_POOL_TIMEOUT=30
# Connection recycle time in seconds (prevent stale connections)
DB_POOL_RECYCLE=1800
# Database connection timeout
DB_CONNECTION_TIMEOUT=30
# Statement timeout in milliseconds (query execution timeout)
DB_STATEMENT_TIMEOUT=60000
# SSL mode for database connections
DB_SSL_MODE=prefer
# Enable connection pool debugging (false for production)
DB_ECHO_POOL=false

# =============================================================================
# SECURITY CONFIGURATION (REQUIRED)
# =============================================================================
# Flask secret key for session management and CSRF protection
# SECURITY: Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
# MUST be at least 32 characters for production security
SECRET_KEY=CHANGE_THIS_TO_A_SECURE_RANDOM_32_PLUS_CHARACTER_STRING_FOR_PRODUCTION

# BCrypt password hashing rounds (production: 12-15)
# Higher values = more secure but slower processing
# 12 is recommended balance for production performance
BCRYPT_LOG_ROUNDS=12

# JWT Token Configuration (if using JWT authentication)
# JWT_SECRET_KEY=CHANGE_THIS_TO_A_DIFFERENT_SECURE_RANDOM_STRING
# JWT_ACCESS_TOKEN_EXPIRES=3600  # 1 hour in seconds
# JWT_REFRESH_TOKEN_EXPIRES=2592000  # 30 days in seconds

# =============================================================================
# SESSION AND COOKIE CONFIGURATION (PRODUCTION SECURE)
# =============================================================================
# Enable secure cookies (REQUIRED for HTTPS production deployment)
SESSION_COOKIE_SECURE=true

# HttpOnly cookies (prevent XSS attacks)
SESSION_COOKIE_HTTPONLY=true

# SameSite policy for CSRF protection
# 'None' required for cross-origin requests with secure cookies
# 'Lax' for same-origin with some cross-origin navigation
# 'Strict' for maximum security (blocks all cross-origin)
SESSION_COOKIE_SAMESITE=None

# Session timeout in seconds (24 hours)
PERMANENT_SESSION_LIFETIME=86400

# Cookie domain (set to your production domain)
# SESSION_COOKIE_DOMAIN=.yourdomain.com

# =============================================================================
# CORS (Cross-Origin Resource Sharing) CONFIGURATION
# =============================================================================
# REQUIRED: Set to your actual production domain(s)
# Examples:
# - Single domain: https://yourdomain.com
# - Multiple domains: https://yourdomain.com,https://app.yourdomain.com
# - Subdomain wildcard: https://*.yourdomain.com
# NEVER use '*' in production!
CORS_ORIGINS=https://yourdomain.com

# Additional CORS settings for production
CORS_ALLOW_CREDENTIALS=true
CORS_MAX_AGE=86400

# =============================================================================
# APPLICATION CONFIGURATION (PRODUCTION)
# =============================================================================
# Flask environment - MUST be 'production' for production deployment
FLASK_ENV=production

# Debug mode - MUST be 'false' in production for security
DEBUG=false

# Application metadata
APP_NAME=Stock Management System
APP_VERSION=1.0.0
APP_ENVIRONMENT=production

# Server configuration
# Host binding (0.0.0.0 for Docker containers)
HOST=0.0.0.0
PORT=5000

# Gunicorn workers (recommended: 2 * CPU cores + 1)
GUNICORN_WORKERS=4
GUNICORN_WORKER_CLASS=sync
GUNICORN_TIMEOUT=30
GUNICORN_KEEPALIVE=2

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================
# API base URL for frontend requests
# Use '/api' for same-domain deployment (recommended)
VITE_API_BASE_URL=/api

# Frontend build configuration
VITE_APP_TITLE=Stock Management System
VITE_APP_VERSION=1.0.0

# =============================================================================
# LOGGING AND MONITORING (PRODUCTION)
# =============================================================================
# Logging level (ERROR, WARNING, INFO, DEBUG)
# Use INFO for production, DEBUG only for troubleshooting
LOG_LEVEL=INFO

# Structured logging format for production
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s

# Log file configuration (optional - Docker logs to stdout by default)
# LOG_FILE=/app/logs/app.log
# LOG_MAX_BYTES=10485760  # 10MB
# LOG_BACKUP_COUNT=5

# Enable request logging for monitoring
REQUEST_LOGGING=true

# Health check configuration
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_DATABASE=true
HEALTH_CHECK_DETAILED=true

# =============================================================================
# SECURITY HEADERS AND MIDDLEWARE (PRODUCTION)
# =============================================================================
# Content Security Policy (CSP)
CSP_DEFAULT_SRC='self'
CSP_SCRIPT_SRC='self' 'unsafe-inline'
CSP_STYLE_SRC='self' 'unsafe-inline'
CSP_IMG_SRC='self' data: https:
CSP_FONT_SRC='self' https:

# Additional security headers
FORCE_HTTPS=true
HSTS_MAX_AGE=31536000
HSTS_INCLUDE_SUBDOMAINS=true
X_CONTENT_TYPE_OPTIONS=nosniff
X_FRAME_OPTIONS=DENY
X_XSS_PROTECTION=1; mode=block

# =============================================================================
# SECURITY MIDDLEWARE CONFIGURATION (PRODUCTION)
# =============================================================================
# Enable rate limiting middleware (true/false)
RATE_LIMIT_ENABLED=true

# Maximum requests per hour per IP address
RATE_LIMIT_REQUESTS=100

# Maximum burst requests per minute per IP address  
RATE_LIMIT_BURST=20

# Enable security headers middleware (true/false)
SECURITY_HEADERS_ENABLED=true

# Enable input validation middleware (true/false)
INPUT_VALIDATION_ENABLED=true

# =============================================================================
# RATE LIMITING (PRODUCTION PROTECTION)
# =============================================================================
# API rate limiting (requests per minute)
RATE_LIMIT_DEFAULT=100
RATE_LIMIT_LOGIN=10
RATE_LIMIT_API=200

# Rate limit storage (memory/redis)
RATE_LIMIT_STORAGE=memory

# =============================================================================
# FILE UPLOAD AND STORAGE (OPTIONAL)
# =============================================================================
# Maximum file upload size (16MB in bytes)
MAX_CONTENT_LENGTH=16777216

# Upload directory (use persistent volume in production)
UPLOAD_FOLDER=/app/uploads

# Allowed file extensions
ALLOWED_EXTENSIONS=jpg,jpeg,png,gif,pdf,xlsx,csv

# =============================================================================
# EMAIL CONFIGURATION (OPTIONAL)
# =============================================================================
# SMTP configuration for notifications and password reset
# Uncomment and configure if email functionality is needed
# MAIL_SERVER=smtp.gmail.com
# MAIL_PORT=587
# MAIL_USE_TLS=true
# MAIL_USE_SSL=false
# MAIL_USERNAME=your-production-email@yourdomain.com
# MAIL_PASSWORD=your-secure-app-password
# MAIL_DEFAULT_SENDER=noreply@yourdomain.com

# =============================================================================
# BACKUP AND MAINTENANCE (OPTIONAL)
# =============================================================================
# Database backup configuration
# BACKUP_ENABLED=true
# BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
# BACKUP_RETENTION_DAYS=30
# BACKUP_S3_BUCKET=your-backup-bucket

# Maintenance mode
# MAINTENANCE_MODE=false
# MAINTENANCE_MESSAGE=System is under maintenance. Please try again later.

# =============================================================================
# DOKPLOY DEPLOYMENT CONFIGURATION
# =============================================================================
# Dokploy-specific settings and optimizations

# Container resource limits (adjust based on your VPS specs)
# These are used by Docker Compose for resource management
MEMORY_LIMIT=512m
CPU_LIMIT=1.0

# Health check intervals (seconds)
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=10
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_START_PERIOD=60

# Restart policy
RESTART_POLICY=unless-stopped

# Network configuration
NETWORK_MODE=bridge
INTERNAL_NETWORK=stock_management_network

# Volume configuration for data persistence
POSTGRES_DATA_VOLUME=postgres_data
UPLOAD_DATA_VOLUME=upload_data

# =============================================================================
# ENVIRONMENT VALIDATION
# =============================================================================
# These variables control environment validation behavior
VALIDATE_ENV_ON_STARTUP=true
STRICT_ENV_VALIDATION=true
FAIL_ON_MISSING_ENV=true

# =============================================================================
# PRODUCTION DEPLOYMENT CHECKLIST
# =============================================================================
# Before deploying to production, ensure you have:
#
# ✓ Generated secure random values for:
#   - SECRET_KEY (32+ characters)
#   - POSTGRES_PASSWORD (12+ characters with mixed case, numbers, symbols)
#   - JWT_SECRET_KEY (if using JWT)
#
# ✓ Updated domain-specific settings:
#   - CORS_ORIGINS (your actual domain)
#   - SESSION_COOKIE_DOMAIN (if using custom domain)
#   - CSP policies (if using external resources)
#
# ✓ Configured security settings:
#   - SESSION_COOKIE_SECURE=true (for HTTPS)
#   - DEBUG=false
#   - FLASK_ENV=production
#
# ✓ Set up monitoring and logging:
#   - LOG_LEVEL=INFO
#   - Health checks enabled
#   - Request logging enabled
#
# ✓ Configured resource limits:
#   - MEMORY_LIMIT (based on VPS specs)
#   - CPU_LIMIT (based on VPS specs)
#   - Database connection pool settings
#
# ✓ Set up persistent volumes:
#   - Database data volume
#   - Upload data volume (if using file uploads)
#
# ✓ Tested deployment:
#   - All services start successfully
#   - Health checks pass
#   - Database connections work
#   - Frontend can reach backend API
#   - CORS policies allow your domain
#
# =============================================================================
# SECURITY NOTES FOR DOKPLOY
# =============================================================================
# 1. Never commit this file with real production values to version control
# 2. Use Dokploy's environment variables interface to set these values
# 3. Enable HTTPS/SSL termination in Dokploy or reverse proxy
# 4. Regularly rotate SECRET_KEY and database passwords
# 5. Monitor logs for security events and errors
# 6. Keep Docker images updated with security patches
# 7. Use strong passwords and enable 2FA for Dokploy access
# 8. Regularly backup database and configuration
# =============================================================================
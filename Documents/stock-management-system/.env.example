# =============================================================================
# STOCK MANAGEMENT SYSTEM - ENVIRONMENT CONFIGURATION
# =============================================================================
# This file contains all environment variables needed for the Stock Management
# System to run in production. Copy this file to .env and update the values.
#
# For Dokploy deployment:
# - Set these variables in the Dokploy environment variables interface
# - Do not include this file in your Docker image
# - Ensure all REQUIRED variables are set before deployment
# =============================================================================

# =============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# =============================================================================
# Choose ONE of the following approaches:
#
# Option 1: Use DATABASE_URL (Recommended for production)
# Full PostgreSQL connection string - overrides individual DB settings
# Format: postgresql://username:password@host:port/database
# DATABASE_URL=postgresql://postgres:your_secure_password@database:5432/stock_management

# Option 2: Use individual database settings
# PostgreSQL database name (default: stock_management)
POSTGRES_DB=stock_management

# PostgreSQL username (default: postgres)
POSTGRES_USER=postgres

# PostgreSQL password (REQUIRED - must be at least 8 characters)
# SECURITY: Use a strong password with mixed case, numbers, and symbols
POSTGRES_PASSWORD=change_this_secure_password_123

# PostgreSQL host (default: database for Docker Compose, localhost for local)
# POSTGRES_HOST=database

# PostgreSQL port (default: 5432)
# POSTGRES_PORT=5432

# =============================================================================
# DATABASE PERFORMANCE CONFIGURATION (OPTIONAL)
# =============================================================================
# Connection pool size (number of persistent connections)
# Production: 15, Development: 5
DB_POOL_SIZE=15

# Maximum overflow connections beyond pool size
# Production: 25, Development: 10
DB_MAX_OVERFLOW=25

# Pool timeout in seconds (time to wait for connection)
# Production: 30, Development: 20
DB_POOL_TIMEOUT=30

# Pool recycle time in seconds (connection lifetime)
# Production: 1800 (30 min), Development: 3600 (1 hour)
DB_POOL_RECYCLE=1800

# Connection timeout in seconds
DB_CONNECTION_TIMEOUT=30

# Statement timeout in milliseconds (query execution timeout)
# Production: 60000 (60s), Development: 30000 (30s)
DB_STATEMENT_TIMEOUT=60000

# SSL mode for database connections (disable/allow/prefer/require)
DB_SSL_MODE=prefer

# Enable connection pool debugging (true/false)
DB_ECHO_POOL=false

# =============================================================================
# SECURITY CONFIGURATION (REQUIRED)
# =============================================================================
# Flask secret key for session management and CSRF protection
# SECURITY: Must be at least 32 characters, use random string generator
# Example: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=CHANGE_THIS_TO_A_RANDOM_32_PLUS_CHARACTER_STRING_FOR_PRODUCTION

# BCrypt password hashing rounds (8-15, recommended: 12)
# Higher values = more secure but slower. 12 is good balance for production.
BCRYPT_LOG_ROUNDS=12

# =============================================================================
# SECURITY MIDDLEWARE CONFIGURATION
# =============================================================================
# Enable rate limiting middleware (true/false)
RATE_LIMIT_ENABLED=true

# Maximum requests per hour per IP address
RATE_LIMIT_REQUESTS=100

# Maximum burst requests per minute per IP address
RATE_LIMIT_BURST=20

# Enable security headers middleware (true/false)
SECURITY_HEADERS_ENABLED=true

# Enable input validation middleware (true/false)
INPUT_VALIDATION_ENABLED=true

# =============================================================================
# SESSION AND COOKIE CONFIGURATION
# =============================================================================
# Enable secure cookies (REQUIRED for HTTPS in production)
# Set to 'true' for production with HTTPS, 'false' for local development
SESSION_COOKIE_SECURE=true

# SameSite cookie policy for cross-origin requests
# - 'None': Required for cross-origin requests with secure cookies
# - 'Lax': Good for same-origin with some cross-origin navigation
# - 'Strict': Most secure, blocks all cross-origin requests
SESSION_COOKIE_SAMESITE=None

# =============================================================================
# CORS (Cross-Origin Resource Sharing) CONFIGURATION
# =============================================================================
# Comma-separated list of allowed origins for API requests
# Examples:
# - Single domain: https://yourdomain.com
# - Multiple domains: https://yourdomain.com,https://app.yourdomain.com
# - All origins (NOT recommended for production): *
# - Local development: http://localhost:3000,http://localhost:5173
CORS_ORIGINS=https://yourdomain.com

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================
# Flask environment (development/production/testing)
FLASK_ENV=production

# Enable debug mode (true/false) - MUST be 'false' in production
DEBUG=false

# Application name and version (for monitoring and logging)
APP_NAME=Stock Management System
APP_VERSION=1.0.0

# =============================================================================
# FRONTEND CONFIGURATION
# =============================================================================
# Base URL for API requests from frontend
# Usually '/api' for same-domain deployment
VITE_API_BASE_URL=/api

# =============================================================================
# OPTIONAL CONFIGURATIONS
# =============================================================================

# Email Configuration (Optional - for notifications and password reset)
# MAIL_SERVER=smtp.gmail.com
# MAIL_PORT=587
# MAIL_USE_TLS=true
# MAIL_USERNAME=your-email@gmail.com
# MAIL_PASSWORD=your-app-password

# File Upload Settings (Optional)
# MAX_CONTENT_LENGTH=16777216  # 16MB in bytes
# UPLOAD_FOLDER=uploads

# Logging Configuration (Optional)
# LOG_LEVEL=INFO
# LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s

# =============================================================================
# DOKPLOY DEPLOYMENT NOTES
# =============================================================================
# When deploying with Dokploy:
#
# 1. Set environment variables in Dokploy's environment variables section
# 2. Use 'database' as POSTGRES_HOST (Docker Compose service name)
# 3. Ensure SESSION_COOKIE_SECURE=true for HTTPS domains
# 4. Set CORS_ORIGINS to your actual domain(s)
# 5. Generate a strong SECRET_KEY (32+ characters)
# 6. Use a secure POSTGRES_PASSWORD (8+ characters)
#
# Required variables for production:
# - SECRET_KEY
# - POSTGRES_PASSWORD
# - CORS_ORIGINS (set to your domain)
# - SESSION_COOKIE_SECURE=true (for HTTPS)
#
# Recommended for production:
# - Use DATABASE_URL instead of individual DB settings
# - Set SESSION_COOKIE_SAMESITE=None for cross-origin requests
# - Enable monitoring and logging
# =============================================================================

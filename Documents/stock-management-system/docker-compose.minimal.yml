# Minimal Docker Compose for Dokploy - No custom networks
# This file removes ALL network configurations to let Dokploy handle networking automatically

services:
  database:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-stock_management}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-stock_management}"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  backend:
    build:
      context: ./stock-management-backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres123@database:5432/stock_management}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      FLASK_ENV: ${FLASK_ENV:-production}
    expose:
      - "5000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s
    restart: unless-stopped

  frontend:
    build:
      context: ./stock-management-frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

volumes:
  postgres_data: